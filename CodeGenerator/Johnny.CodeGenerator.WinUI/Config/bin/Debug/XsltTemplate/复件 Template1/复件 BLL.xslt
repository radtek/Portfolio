<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output omit-xml-declaration="yes" indent="no" method="text" encoding="UTF-8"/>
	<xsl:template match="/">
		<xsl:text>#region Copyright (C) 2008 BLL
/************************************************************************
This class is generated by ZrXSCodeGen
ZrXSCodeGen </xsl:text>
		<xsl:value-of select="entity/@XSCodeGen"/>
		<xsl:text>
Model v 0.2 2006-05-28
*************************************************************************/
#endregion

using System;
using System.Text;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.Common;
using System.Data.Sql;

namespace </xsl:text>
		<xsl:value-of select="entity/@namespace"/>
		<xsl:text>.Entities
{
</xsl:text>
		<xsl:apply-templates select="entity"/>
		<xsl:text>
}
</xsl:text>
	</xsl:template>
	<xsl:template match="entity">
		<xsl:text>
	/// &lt;summary&gt;
	/// </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text> is an entity calss that represents </xsl:text>
		<xsl:value-of select="@description"/>
		<xsl:text>. </xsl:text>
		<xsl:text>
	/// &lt;/summary&gt;
	public class </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>
	{
		#region public methods
		/// &lt;summary&gt;
		/// default constructor of </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>. </xsl:text>
		<xsl:text>
		/// &lt;/summary&gt;
		public </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>()
		{
			Initialize();
		}
		
		/// &lt;summary&gt;
        /// ToString generated text representation of the current instance.
		/// &lt;/summary&gt;
        /// &lt;returns&gt;a string of text representation of the current instance. &lt;/returns&gt;
		public override string ToString()
		{
			//TODO: implement ToString()
			return "" ;
		}
		
		#endregion
</xsl:text>
		<xsl:text>		
		#region declaration</xsl:text>
		<xsl:for-each select="./columns/property">
			<xsl:text>
		private </xsl:text>
			<xsl:value-of select="@type"/>
			<xsl:text> </xsl:text>
			<xsl:value-of select="@field"/>
			<xsl:text>;</xsl:text>
		</xsl:for-each>
		<xsl:text>
		#endregion</xsl:text>
		<xsl:text>
		
		#region property</xsl:text>
		<xsl:for-each select="./columns/property">
			<xsl:text>
		/// &lt;summary&gt;
		/// </xsl:text>
			<xsl:value-of select="@name"/>
			<xsl:text> is a </xsl:text>
			<xsl:value-of select="@type"/>
			<xsl:text> property that represents </xsl:text>
			<xsl:value-of select="@description"/>
			<xsl:text>. </xsl:text>
			<xsl:text>
		/// &lt;/summary&gt;
		public </xsl:text>
			<xsl:value-of select="@type"/>
			<xsl:text> </xsl:text>
			<xsl:value-of select="@name"/>
			<xsl:text>
		{
			get
			{
				return </xsl:text>
			<xsl:value-of select="@field"/>
			<xsl:text>;
			}
			set
			{
				</xsl:text>
			<xsl:value-of select="@field"/>
			<xsl:text> = value;
			}
		}
</xsl:text>
		</xsl:for-each>
		<xsl:text>
		#endregion
</xsl:text>
		<xsl:text>
		#region private methods
		/// &lt;summary&gt;
		/// initialize fields with default values.
		/// &lt;/summary&gt;
		private void Initialize()
		{
			</xsl:text>
		<xsl:for-each select="./columns/property">
			<xsl:if test="@initialValue!=''">
				<xsl:value-of select="@field"/>
				<xsl:text> = </xsl:text>
				<xsl:value-of select="@initialValue"/>
				<xsl:text>;
			</xsl:text>
			</xsl:if>
		</xsl:for-each>
		<xsl:text>
		}
</xsl:text>
		<xsl:text>
		#endregion
</xsl:text>
		<xsl:text>
		
	}
	
	/// &lt;summary&gt;
	/// </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>s is a collection calss that contains instances of Class </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>. </xsl:text>
		<xsl:text>
	/// &lt;/summary&gt;
	public class </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>s : Collection&lt;</xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>&gt;
    {
	
        #region Constructors
        /// &lt;summary&gt;
        /// This is the default constructor for the </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>s collection class,  
        /// which takes no parameters.
        ///&lt;/summary&gt;
        public </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>s()
        {
        }
        
		#endregion
	}
</xsl:text>
	</xsl:template>
</xsl:stylesheet>
